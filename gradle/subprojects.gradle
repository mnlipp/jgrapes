import java.util.regex.Pattern
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'pl.allegro.tech.build.axion-release'

if (project.name.startsWith("org.jgrapes") || project.name == "examples") {

    apply plugin: 'java-library'
    apply plugin: 'biz.aQute.bnd.builder'
    apply plugin: 'groovy'
    apply from: "${project.rootDir}/gradle/layout.gradle"

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    scmVersion {
        versionIncrementer 'incrementMinor'
        tag {
            def shortened = project.name.startsWith(project.group + ".") ?
                project.name.substring(project.group.length() + 1) : project.name
            if (shortened == 'http') {
                shortened = 'http-base'
            }
            prefix = shortened.replace('.', '-') + "-"
        }
    }
    version = scmVersion.version
    ext.isSnapshot = version.endsWith('-SNAPSHOT')

    if (project.name != "examples") {
        apply from: "${project.rootDir}/gradle/baseline.gradle"
        apply from: "${project.rootDir}/gradle/publishing.gradle"
    }
    
    // Provide the Bundle-Version (derive from project version)
    def releaseVersion = version.replaceAll(/-SNAPSHOT$/, "")
    ext.bundleVersion = "$releaseVersion" +
         (isSnapshot ? '.-\${tstamp}-SNAPSHOT' : '.ga')

    jar {
        doFirst {
            manifest {
                attributes('Git-Descriptor': inputs.properties['gitDescriptor'])
            }
        }
        manifest {
            inputs.property("gitDescriptor", { grgit.describe() })
            
            // Set Git revision information in the manifests of built bundles
            attributes([
                "Git-Descriptor": grgit.describe(always: true),
                "Git-SHA": grgit.head().id,
                "Bundle-Version": bundleVersion
            ])
        }
        bundle {
            properties.put("bundleVersion", bundleVersion)
            bnd("-diffignore": "Git-Descriptor, Git-SHA")
        }
    }

    dependencies {
        compileOnly 'org.osgi:org.osgi.annotation:6.0.0'
        testImplementation 'net.jodah:concurrentunit:0.4.2'
        testImplementation "org.apache.groovy:groovy-all:4.0.21"
        testImplementation "org.spockframework:spock-core:2.3-groovy-4.0"
        testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
        testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
    }
    
/*    testing {
        suites {
            // Configure the built-in test suite
            test {
                // Use JUnit Jupiter test framework
                useJUnitPlatform('5.10.2')
            }
        }
    }
*/
    test {
    //    if (!rootProject.isCiBuild) {
    //        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=18888'
    //    }
        useJUnitPlatform()

        testLogging {
            events TestLogEvent.FAILED,
                   TestLogEvent.SKIPPED,
                   TestLogEvent.PASSED,
                   TestLogEvent.STANDARD_ERROR,
                   TestLogEvent.STANDARD_OUT
                   
            exceptionFormat TestExceptionFormat.FULL
    
            showStandardStreams = true
            showExceptions = true
            showStackTraces = true
            showCauses = true
        }
            
        if (isCiBuild) {
            maxParallelForks = 2
            maxHeapSize = '768m'
        } else {
            maxHeapSize = '2048m'
        }
        
        // https://bugs.openjdk.java.net/browse/JDK-8213202
        if (JavaVersion.current().isJava11()) {
            jvmArgs '-Dhttps.protocols=TLSv1,TLSv1.1,TLSv1.2'
        }
    }
}
