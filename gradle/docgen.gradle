var docDestinationDir = file("${rootProject.buildDir}/javadoc")

configurations {
    javadocTaglets
}

configurations {
    markdownDoclet
    javadocTaglets
}

dependencies {
    markdownDoclet "org.jdrupes.mdoclet:doclet:4.0.0"
    javadocTaglets "org.jdrupes.taglets:plantuml-taglet:3.0.0"
}

task javadocResources(type: Copy) {
    into file(docDestinationDir)
    from ("${rootProject.rootDir}/misc") {
        include '*.woff2'
    }
}

task apidocs(type: JavaExec) {
    // Does not work on JitPack, no /usr/bin/dot
    enabled = JavaVersion.current() == JavaVersion.VERSION_21 && !isJitPackBuild

    dependsOn javadocResources

    // Make sure that other projects' compileClasspaths are resolved
    rootProject.subprojects
        .findAll({project -> project.name.startsWith("org.jgrapes") &&
            project.name != "org.jgrapes.core"})
        .each{project -> dependsOn project.tasks.assemble}
    
    inputs.file rootProject.file('overview.md')
    inputs.file "${rootProject.rootDir}/misc/javadoc-overwrites.css"
    
    classpath = files(rootProject.subprojects
        .findAll({project -> project.name.startsWith("org.jgrapes")})
        .collect {project -> project.sourceSets.main.compileClasspath})
    var sourceDirs = rootProject.subprojects
        .findAll({project -> project.name.startsWith("org.jgrapes")})
        .collect{project -> project.sourceSets.main.allJava.getSrcDirs() }
        .flatten().findAll(dir -> dir.exists())
    sourceDirs.each { inputs.dir(it) }
    
    outputs.dir(docDestinationDir)
    
    jvmArgs = ['--add-exports=jdk.compiler/com.sun.tools.doclint=ALL-UNNAMED',
        '--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
        '--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
        '--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
        '--add-exports=jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED',
        '--add-exports=jdk.javadoc/jdk.javadoc.internal.doclets.toolkit=ALL-UNNAMED',
        '--add-opens=jdk.javadoc/jdk.javadoc.internal.doclets.toolkit.resources.releases=ALL-UNNAMED',
        '-Duser.language=en', '-Duser.region=US']
    mainClass = 'jdk.javadoc.internal.tool.Main'

    args = ['-doctitle', """JGrapes 
            (core-${-> findProject(':org.jgrapes.core').version}, 
            io-${-> findProject(':org.jgrapes.io').version},
            http-${-> findProject(':org.jgrapes.http').version},
            http.freemarker-${-> findProject(':org.jgrapes.http.freemarker').version},
            util-${-> findProject(':org.jgrapes.util').version},
            mail-${-> findProject(':org.jgrapes.mail').version})""",
        '-use',
        '-linksource',
        '-link', 'https://docs.oracle.com/en/java/javase/21/docs/api/',
        '-link', 'https://mnlipp.github.io/jdrupes-httpcodec/javadoc/',
        '-link', 'https://jakarta.ee/specifications/mail/2.1/apidocs/',
        '--add-exports', 'jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED',
        '--add-exports', 'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
        '-doclet', 'org.jdrupes.mdoclet.MDoclet',
        '-docletpath', configurations.markdownDoclet.files.asType(List).join(":"),
        '--disable-auto-highlight',
        '-tagletpath', configurations.javadocTaglets.files.asType(List).join(":"),
        '-taglet', 'org.jdrupes.taglets.plantUml.PlantUml',
        '-taglet', 'org.jdrupes.taglets.plantUml.StartUml',
        '-taglet', 'org.jdrupes.taglets.plantUml.EndUml',
        '-overview', "${rootProject.file('overview.md')}",
        '-d', docDestinationDir,
        '-sourcepath', sourceDirs.join(':'),
        '-subpackages', 'org.jgrapes',
        '-bottom', rootProject.file("misc/javadoc.bottom.txt").text,
        '--allow-script-in-comments',
        '-Xdoclint:-html',
        '--add-stylesheet', "${rootProject.rootDir}/misc/javadoc-overwrites.css",
        '--add-exports=jdk.javadoc/jdk.javadoc.internal.doclets.formats.html=ALL-UNNAMED',
        '-quiet'
        ]
    
    ignoreExitValue true
}

apply plugin: 'org.ajoberstar.git-publish'

gitPublish {
    repoUri = 'https://github.com/mnlipp/jgrapes.git'
    branch = 'gh-pages'
    contents {
        from("${rootProject.buildDir}/javadoc") {
            into 'javadoc'
        }
        if ({ !findProject(':org.jgrapes.core').isSnapshot
                && !findProject(':org.jgrapes.util').isSnapshot
                && !findProject(':org.jgrapes.io').isSnapshot
                && !findProject(':org.jgrapes.http').isSnapshot
                && !findProject(':org.jgrapes.http.freemarker').isSnapshot }) {
            from("${rootProject.buildDir}/javadoc") {
                into 'latest-release/javadoc'
            }
        }
    }
    preserve { include '**/*' }
    commitMessage = "Updated."
}

tasks.gitPublishReset.mustRunAfter subprojects.tasks
    .collect { tc -> tc.findByName("build") }.flatten()
tasks.gitPublishReset.mustRunAfter subprojects.tasks
    .collect { tc -> tc.findByName("test") }.flatten()
tasks.gitPublishCopy.dependsOn apidocs


